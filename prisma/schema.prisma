// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model user {
  id              Int       @id @default(autoincrement())
  role            String
  email           String?   @unique
  firstName       String?
  lastName        String?
  profilePicture  String?
  providers       providers[]
  phoneNumber     Int?      @unique
  password        String
  authProvider    String    @default("email")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model providers {
  id              Int         @id @default(autoincrement())
  name            String?
  user            user        @relation(fields: [userId], references: [id])
  userId          Int
  category        categories  @relation(fields: [categoryId], references: [id])
  categoryId      Int
  services        providerServices[]
  phoneNumber     Int
  image           String?
  bio             String?
  location        locations   @relation(fields: [locationId], references: [id])
  locationId      Int
  rating          Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model locations {
  id              Int         @id @default(autoincrement())
  address         String
  lat             Int?
  lng             Int?
  alt             Int?
  providers       providers[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model categories {
  id              Int         @id @default(autoincrement())
  title           String
  description     String
  image           String?
  order           Int?
  subCategories   subCategories[]
  providers       providers[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model subCategories {
  id              Int         @id @default(autoincrement())
  title           String
  description     String
  category        categories  @relation(fields: [categoryId], references: [id])
  categoryId      Int
  services        services[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model services {
  id              Int                 @id @default(autoincrement())
  title           String
  description     String
  image           String?
  order           Int?
  subCategory     subCategories       @relation(fields: [subCategoryId], references: [id])
  subCategoryId   Int
  providers       providerServices[]
  parentId        Int?
  parent          services?           @relation(name: "subServices", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subServices     services[]          @relation(name: "subServices")
  durationMin     Int?
  durationMax     Int?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model providerServices {
  id              Int                 @id @default(autoincrement())
  title           String
  description     String
  image           String?
  order           Int?
  service         services?           @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  serviceId       Int?
  provider        providers           @relation(fields: [providerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  providerId      Int
  price           Int
  durationMin     Int?
  durationMax     Int?
  parentId        Int?
  parent          providerServices?   @relation(name: "subServices", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subServices     providerServices[]  @relation(name: "subServices")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
